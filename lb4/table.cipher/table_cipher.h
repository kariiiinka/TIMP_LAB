/** @file
* @author Демина К.С.
* @version 1.0
* @date 18.01.24
* @copyright ИБСТ ПГУ
* @brief Заголовочный файл для модуля Table_cipher
*/
#pragma once
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>
#include <stdexcept>
/** @brief Шифрование методом табличной маршрутной перестановки
* @details Ключ устанавливается в конструкторе.
* Для зашифровывания и расшифровывания предназначены методы encrypt и decrypt.
* @warning Реализация только для английского языка
*/
class table_cipher{
    public:
    /** @brief Ключ, заданный пользователем
    */
    uint key;
    /** @brief Значение строк, вычисленнео по ключу
    */
    double rows;
    /** @brief Значение инициализации для двумерного вектора
    */
    std::string i_value;
    /** @brief Вектор для преобразования строки в таблицу
    */
    std::vector<std::vector<std::string>> st_to_vec;
    /**
    * @brief Зашифрование
    * @param [in] st Открытый текст
    * @details В методе производится вычисление числа строк в таблице по введенному открытому тексту
    * Происходит проверка ключа и введенного открытого текста на наличие ошибок
    * Далее методом write_str_to_v происходит запись открытого текста в двумерный вектор
    * Затем по заданному в условии порядку происходит считывание символов из вектора и запись их в результирующую строку
    * На этапе ввода открытого текста и возвращения результирующей строки удаляются пробелы
    * @return Функция возвращает зашифрованную строку
    */
    std::string encrypt(std::string st);
    /**
    * @brief Расшифрование
    * @param [in] st Шифротекст
    * @details В методе производится вычисление числа строк в таблице по введенному шифротексту
    * Происходит проверка ключа и введенного шифротекста на наличие ошибок
    * Далее методом write_str_to_v происходит запись шифротектса в двумерный вектор
    * Затем по заданному в условии порядку происходит считывание символов из вектора и запись их в результирующую строку
    * На этапе ввода шифротекста и возвращения результирующей строки удаляются пробелы
    * @return Функция возвращает расшифрованную строку
    */
    std::string decrypt(std::string st);
    /**
    * @brief Запись строки в двумерный вектор для метода encrypt
    * @details Вектор, переданный по ссылке заполняется посимвольно значениями открытого текста
    * @param [in] open_text Открытый текст
    * @param [in] vector Двумерный вектор для записи строки
    * @return Функция ничего не возвращает
    */
    void write_str_to_v(std::string st,std::vector<std::vector<std::string>> &v);
    /**
    * @brief Запись строки в двумерный вектор для метода decrypt
    * @details Вектор, переданный по ссылке заполняется посимвольно значениями шифротекста
    * @param [in] cipher_text Шифротекст
    * @param [in] vector Двумерный вектор для записи строки
    * @return Функция ничего не возвращает
    */
    void write_str_to_v(std::vector<std::vector<std::string>> &v,std::string st);
    /**
    * @brief Обработка ошибок открытого текста и шифротекста
    * @details Строчные буквы в строке преобразует в заглавные
    * @param [in] text Обрабатываемая строка
    * @return Функция ничего не возвращает
    * @throw table_error, если текст пустой или присутствуют символы не-бувы
    */
    void text_validation(std::string &text);
    /**
    * @brief Обработка ошибок ключа для шифротекста и открытого текста
    * @details Просиходит проверка длины ключа
    * @param [in] key Обрабатываемый ключ
    * @param [in] text Обрабатываемая строка
    * @return Функция ничего не возвращает
    * @throw table_error, если ключ = 1, ключ больше длины строки или равен длине строки
    */
    void key_validation(uint &key,std::string &text);
    /**
    * @brief Конструктор для установки ключа и значения инициализации двумерного вектора
    */
    table_cipher(double k,std::string& initial_value);
};
/** @brief Класс ошибок для модуля Table_cipher
* @details Используется для обозначения специфических ошибок, возникающих при работе с модулем
* @warning Реализация только для английского языка
*/
class table_error: public std::invalid_argument
{
public:
    explicit table_error (const std::string& what_arg):
        std::invalid_argument(what_arg) {}
    explicit table_error (const char* what_arg):
        std::invalid_argument(what_arg) {}
};
